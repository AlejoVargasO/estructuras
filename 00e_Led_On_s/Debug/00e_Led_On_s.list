
00e_Led_On_s.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000194  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800031c  08000324  00010324  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800031c  0800031c  00010324  2**0
                  CONTENTS
  4 .ARM          00000000  0800031c  0800031c  00010324  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800031c  08000324  00010324  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800031c  0800031c  0001031c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000320  08000320  00010320  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010324  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .sram2        00000000  10000000  10000000  00010324  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00020000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00010324  2**0
                  CONTENTS, READONLY
 13 .debug_line   00000288  00000000  00000000  00010354  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_info   000000b2  00000000  00000000  000105dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000005e  00000000  00000000  0001068e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000000d8  00000000  00000000  000106f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00000139  00000000  00000000  000107c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_ranges 00000080  00000000  00000000  00010908  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_frame  0000002c  00000000  00000000  00010988  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000000 	.word	0x20000000
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000304 	.word	0x08000304

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000004 	.word	0x20000004
 80001c4:	08000304 	.word	0x08000304

080001c8 <main>:

.section .text.main
.type	main,%function
main:

	bl BSP_LD2_Init
 80001c8:	f000 f820 	bl	800020c <BSP_LD2_Init>
	bl BSP_LD2_Set
 80001cc:	f000 f82e 	bl	800022c <BSP_LD2_Set>
	bl BSP_LD2_Clear
 80001d0:	f000 f836 	bl	8000240 <BSP_LD2_Clear>

080001d4 <loop>:


loop:
	bl BSP_LD2_Toggle
 80001d4:	f000 f83e 	bl	8000254 <BSP_LD2_Toggle>
	b loop
 80001d8:	e7fc      	b.n	80001d4 <loop>

080001da <MSP_GPIO_MODER_Init>:

.section .text.MSP_GPIO_MODER_Init
.type	MSP_GPIO_MODER_Init,%function
MSP_GPIO_MODER_Init:
// CONFIGURAR EL PIN 5 COMO SALIDA (01) (bits 1:0 in MODER register)
	ldr r4, [r0,GPIO_MODER]   // Utilizamos otro registro(r5) para sumarle el offset del registro MODER(0x00)
 80001da:	6804      	ldr	r4, [r0, #0]
	orr r4, r1
 80001dc:	ea44 0401 	orr.w	r4, r4, r1
	bic r4, r2
 80001e0:	ea24 0402 	bic.w	r4, r4, r2
	str r4, [r0,GPIO_MODER]	 // Cargamos el valor del segundo registro en el primero el cual contiene la direccion GPIOA MODER register
 80001e4:	6004      	str	r4, [r0, #0]

	bx lr
 80001e6:	4770      	bx	lr

080001e8 <MSP_GPIO_Set>:
.size MSP_GPIO_MODER_Init,.-MSP_GPIO_MODER_Init

.section .text.MSP_GPIO_Set
.type	MSP_GPIO_Set,%function
MSP_GPIO_Set:
	str r1, [r0,GPIO_BSRR]
 80001e8:	6181      	str	r1, [r0, #24]
	bx lr
 80001ea:	4770      	bx	lr

080001ec <MSP_GPIO_Clear>:
.size MSP_GPIO_Set,.-MSP_GPIO_Set

.section .text.MSP_GPIO_Clear
.type	MSP_GPIO_Clear,%function
MSP_GPIO_Clear:
	str r1, [r0,GPIO_BRR]
 80001ec:	6281      	str	r1, [r0, #40]	; 0x28
	bx lr
 80001ee:	4770      	bx	lr

080001f0 <MSP_GPIO_Toggle>:
.size MSP_GPIO_Clear,.-MSP_GPIO_Clear

.section .text.MSP_GPIO_Toggle
.type	MSP_GPIO_Toggle,%function
MSP_GPIO_Toggle:
	ldr r4, [r0,GPIO_ODR]   // Utilizamos otro registro(r5) para sumarle el offset del registro ODR(0x14)
 80001f0:	6944      	ldr	r4, [r0, #20]
	eor r4, r1      // Colocamos en 1 el bit 5 que corresponde al pin 5
 80001f2:	ea84 0401 	eor.w	r4, r4, r1
	str r4, [r0,GPIO_ODR]	 // Cargamos el valor del segundo registro en el primero el cual contiene la direccion GPIOA ODR register
 80001f6:	6144      	str	r4, [r0, #20]
	bx lr
 80001f8:	4770      	bx	lr
	...

080001fc <MSP_RCC_AHB2ENR_Init>:

.section .text.MSP_RCC_AHB2ENR_Init
.type	MSP_RCC_AHB2ENR_Init,%function
MSP_RCC_AHB2ENR_Init:
// ACTIVAR RELOJ DEL PUERTO A (bit 0 in AHB2ENR register) (RM0351, page 251)
	ldr r6, =RCC_BASE  // Carga en el registro 6 (r6) la direccion RCC_BASE (0x40021000)
 80001fc:	4e02      	ldr	r6, [pc, #8]	; (8000208 <MSP_RCC_AHB2ENR_Init+0xc>)
	ldr r5, [r6,RCC_AHB2ENR]   // Utilizamos otro registro (r5) para sumarle el offset del registro AHB2ENR (0x4C)
 80001fe:	6cf5      	ldr	r5, [r6, #76]	; 0x4c
	orr r5, r0   // Activamos el reloj del puerto A colocando un 1 en el bit 0 utilizando un enmascaramiento con orr
 8000200:	ea45 0500 	orr.w	r5, r5, r0
	str r5, [r6,RCC_AHB2ENR]   // Almacenamos el valor del segundo registro en el primer registro el cual contiene la direccion del registro AHB2ENR
 8000204:	64f5      	str	r5, [r6, #76]	; 0x4c

	bx lr
 8000206:	4770      	bx	lr
	ldr r6, =RCC_BASE  // Carga en el registro 6 (r6) la direccion RCC_BASE (0x40021000)
 8000208:	40021000 	.word	0x40021000

0800020c <BSP_LD2_Init>:
.include "stm32l476_n64_bsp_asm_h.s"

.section .text.BSP_LD2_Init
.type	BSP_LD2_Init,%function
BSP_LD2_Init:
	push {lr}
 800020c:	b500      	push	{lr}
	movw r0,1
 800020e:	f240 0001 	movw	r0, #1
	bl MSP_RCC_AHB2ENR_Init
 8000212:	f7ff fff3 	bl	80001fc <MSP_RCC_AHB2ENR_Init>

	ldr r0, =GPIOA_BASE
 8000216:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
	movw r1,(1<<10)
 800021a:	f240 4100 	movw	r1, #1024	; 0x400
	movw r2,(1<<11)
 800021e:	f640 0200 	movw	r2, #2048	; 0x800
	bl MSP_GPIO_MODER_Init
 8000222:	f7ff ffda 	bl	80001da <MSP_GPIO_MODER_Init>
	pop {lr}
 8000226:	f85d eb04 	ldr.w	lr, [sp], #4
	bx lr
 800022a:	4770      	bx	lr

0800022c <BSP_LD2_Set>:
.size BSP_LD2_Init,.-BSP_LD2_Init

.section .text.BSP_LD2_Set
.type	BSP_LD2_Set,%function
BSP_LD2_Set:
	push {lr}
 800022c:	b500      	push	{lr}
	ldr r0, =GPIOA_BASE
 800022e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
	movw r1,(1<<5)
 8000232:	f240 0120 	movw	r1, #32
	bl MSP_GPIO_Set
 8000236:	f7ff ffd7 	bl	80001e8 <MSP_GPIO_Set>
	pop {lr}
 800023a:	f85d eb04 	ldr.w	lr, [sp], #4
	bx lr
 800023e:	4770      	bx	lr

08000240 <BSP_LD2_Clear>:
.size BSP_LD2_Set,.-BSP_LD2_Set

.section .text.BSP_LD2_Clear
.type	BSP_LD2_Clear,%function
BSP_LD2_Clear:
	push {lr}
 8000240:	b500      	push	{lr}
	ldr r0, =GPIOA_BASE
 8000242:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
	movw r1,(1<<5)
 8000246:	f240 0120 	movw	r1, #32
	bl MSP_GPIO_Clear
 800024a:	f7ff ffcf 	bl	80001ec <MSP_GPIO_Clear>
	pop {lr}
 800024e:	f85d eb04 	ldr.w	lr, [sp], #4
	bx lr
 8000252:	4770      	bx	lr

08000254 <BSP_LD2_Toggle>:
.size BSP_LD2_Clear,.-BSP_LD2_Clear

.section .text.BSP_LD2_Toggle
.type	BSP_LD2_Toggle,%function
BSP_LD2_Toggle:
	push {lr}
 8000254:	b500      	push	{lr}
	ldr r0, =GPIOA_BASE
 8000256:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
	movw r1,(1<<5)
 800025a:	f240 0120 	movw	r1, #32
	bl MSP_GPIO_Toggle
 800025e:	f7ff ffc7 	bl	80001f0 <MSP_GPIO_Toggle>
	pop {lr}
 8000262:	f85d eb04 	ldr.w	lr, [sp], #4
	bx lr
 8000266:	4770      	bx	lr

08000268 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000268:	480d      	ldr	r0, [pc, #52]	; (80002a0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800026a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800026c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000270:	480c      	ldr	r0, [pc, #48]	; (80002a4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000272:	490d      	ldr	r1, [pc, #52]	; (80002a8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000274:	4a0d      	ldr	r2, [pc, #52]	; (80002ac <LoopForever+0xe>)
  movs r3, #0
 8000276:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000278:	e002      	b.n	8000280 <LoopCopyDataInit>

0800027a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800027a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800027c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800027e:	3304      	adds	r3, #4

08000280 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000280:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000282:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000284:	d3f9      	bcc.n	800027a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000286:	4a0a      	ldr	r2, [pc, #40]	; (80002b0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000288:	4c0a      	ldr	r4, [pc, #40]	; (80002b4 <LoopForever+0x16>)
  movs r3, #0
 800028a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800028c:	e001      	b.n	8000292 <LoopFillZerobss>

0800028e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800028e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000290:	3204      	adds	r2, #4

08000292 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000292:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000294:	d3fb      	bcc.n	800028e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000296:	f000 f811 	bl	80002bc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800029a:	f7ff ff95 	bl	80001c8 <main>

0800029e <LoopForever>:

LoopForever:
  b LoopForever
 800029e:	e7fe      	b.n	800029e <LoopForever>
  ldr   r0, =_estack
 80002a0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80002a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002a8:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002ac:	08000324 	.word	0x08000324
  ldr r2, =_sbss
 80002b0:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002b4:	2000001c 	.word	0x2000001c

080002b8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002b8:	e7fe      	b.n	80002b8 <ADC1_2_IRQHandler>
	...

080002bc <__libc_init_array>:
 80002bc:	b570      	push	{r4, r5, r6, lr}
 80002be:	4d0d      	ldr	r5, [pc, #52]	; (80002f4 <__libc_init_array+0x38>)
 80002c0:	4c0d      	ldr	r4, [pc, #52]	; (80002f8 <__libc_init_array+0x3c>)
 80002c2:	1b64      	subs	r4, r4, r5
 80002c4:	10a4      	asrs	r4, r4, #2
 80002c6:	2600      	movs	r6, #0
 80002c8:	42a6      	cmp	r6, r4
 80002ca:	d109      	bne.n	80002e0 <__libc_init_array+0x24>
 80002cc:	4d0b      	ldr	r5, [pc, #44]	; (80002fc <__libc_init_array+0x40>)
 80002ce:	4c0c      	ldr	r4, [pc, #48]	; (8000300 <__libc_init_array+0x44>)
 80002d0:	f000 f818 	bl	8000304 <_init>
 80002d4:	1b64      	subs	r4, r4, r5
 80002d6:	10a4      	asrs	r4, r4, #2
 80002d8:	2600      	movs	r6, #0
 80002da:	42a6      	cmp	r6, r4
 80002dc:	d105      	bne.n	80002ea <__libc_init_array+0x2e>
 80002de:	bd70      	pop	{r4, r5, r6, pc}
 80002e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80002e4:	4798      	blx	r3
 80002e6:	3601      	adds	r6, #1
 80002e8:	e7ee      	b.n	80002c8 <__libc_init_array+0xc>
 80002ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80002ee:	4798      	blx	r3
 80002f0:	3601      	adds	r6, #1
 80002f2:	e7f2      	b.n	80002da <__libc_init_array+0x1e>
 80002f4:	0800031c 	.word	0x0800031c
 80002f8:	0800031c 	.word	0x0800031c
 80002fc:	0800031c 	.word	0x0800031c
 8000300:	08000320 	.word	0x08000320

08000304 <_init>:
 8000304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000306:	bf00      	nop
 8000308:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800030a:	bc08      	pop	{r3}
 800030c:	469e      	mov	lr, r3
 800030e:	4770      	bx	lr

08000310 <_fini>:
 8000310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000312:	bf00      	nop
 8000314:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000316:	bc08      	pop	{r3}
 8000318:	469e      	mov	lr, r3
 800031a:	4770      	bx	lr
